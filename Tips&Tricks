1) Whenever you're trying to solve an array problem in-place, always consider the possibility of iterating backwards instead of forwards through the array. It can completely change the problem, and make it a lot easier.
2) Insert a new node into a linked list takes O(1) time complexity.
3) Deleting a node into a linked list takes be O(N) time complexity. 
4) Arrays class in java provides the method Arrays.equals() to check whether two arrays are equal or not.
5) If we take XOR of zero and some bit, it will return that bit
    a (xor) 0 = a
6) If we take XOR of two same bits, it will return 0
    a (xor) a = 0
7) a (xor) b (xor) a = [a (xor) a] (xor) b = 0 (xor) b = b
8) Inorder traversal of BST is an array sorted in ascending order.
9) Successor = "after node", i.e. the next node, or the smallest node after the current one.
       -> To find a successor, go to the right once and then as many times to the left as you could.
                public TreeNode successor(TreeNode root) {
                    root = root.right;
                    while (root.left != null) root = root.left;
                    return root;
                } 
10) Predecessor = "before node", i.e. the previous node, or the largest node before the current one.
        -> To find a predecessor, go to the left once and then as many times to the right as you could.
                public TreeNode predecessor(TreeNode root) {
                    root = root.left;
                    while (root.right != null) root = root.right;
                    return root;
                } 
11) Hash Table :
    -> If there are M keys in total, we can achieve the space complexity of O(M) easily when using a hash table.

    -> Most of us might have used an array in each bucket to store values in the same bucket. Ideally, the bucket size is small enough to be regarded as a constant. The time complexity of both insertion and search will be O(1).

    -> But in the worst case, the maximum bucket size will be N. And the time complexity will be O(1) for insertion but O(N) for search.

    -> The average time complexity of both insertion and search is still O(1). And the time complexity in the worst case is O(logN) for both insertion and search by using height-balanced BST. It is a trade-off between insertion and search.

